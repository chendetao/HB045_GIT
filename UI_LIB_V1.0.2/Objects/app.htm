<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Thu Jun 21 14:03:42 2018
<BR><P>
<H3>Maximum Stack Usage =         96 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
taskGUI &rArr; font_is_ok &rArr; U2G &rArr; r_dat_bat &rArr; spi_write_byte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[39]">__asm___12_OSAL_Timer_c_timer__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">__asm___12_OSAL_Timer_c_timer__nrf_delay_us</a><BR>
 <LI><a href="#[3a]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">FPU_IRQHandler</a> from fpu.o(i.FPU_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">GPIOTE_IRQHandler</a> from irqhandler.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">RTC1_IRQHandler</a> from osal_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">RTC2_IRQHandler</a> from osal_timer.o(i.RTC2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[16]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">UARTE0_UART0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[2f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[34]">taskFrame</a> from task_frame.o(i.taskFrame) referenced from osal_task.o(.constdata)
 <LI><a href="#[33]">taskGUI</a> from task_gui.o(i.taskGUI) referenced from osal_task.o(.constdata)
 <LI><a href="#[35]">taskMotor</a> from task_motor.o(i.taskMotor) referenced from osal_task.o(.constdata)
 <LI><a href="#[32]">taskTouch</a> from task_touch.o(i.taskTouch) referenced from osal_task.o(.constdata)
 <LI><a href="#[36]">win_main_proc</a> from ui_win_main.o(i.win_main_proc) referenced from window.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[37]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[90]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[91]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[92]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[93]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[39]"></a>__asm___12_OSAL_Timer_c_timer__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, osal_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_OSAL_Timer_c_timer__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_OSAL_Timer_c_timer__nrf_delay_us
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>

<P><STRONG><a name="[3a]"></a>__asm___11_nrf_delay_c_532987f3__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, nrf_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_isr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerInit
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[88]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[38]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[99]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>DrawUI_Bitmap</STRONG> (Thumb, 218 bytes, Stack size 36 bytes, ui_draw.o(i.DrawUI_Bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DrawUI_Bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_ui
</UL>

<P><STRONG><a name="[3f]"></a>EntryDeepSleepMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, f_lib.o(i.EntryDeepSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EntryDeepSleepMode &rArr; spi_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_is_ok
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[43]"></a>EraseSector</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, f_lib.o(i.EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EraseSector &rArr; ExitDeepSleepMode &rArr; spi_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[44]"></a>ExitDeepSleepMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, f_lib.o(i.ExitDeepSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExitDeepSleepMode &rArr; spi_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_is_ok
</UL>

<P><STRONG><a name="[2e]"></a>FPU_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fpu.o(i.FPU_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, irqhandler.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOTE_IRQHandler &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>LCD_Clear</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_st7735.o(i.LCD_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[48]"></a>LCD_Config</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, lcd_st7735.o(i.LCD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Config &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config_Delay
</UL>

<P><STRONG><a name="[4f]"></a>LCD_Config_Delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd_st7735.o(i.LCD_Config_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Config_Delay &rArr; LCD_Config &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[50]"></a>LCD_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd_st7735.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_Init &rArr; LCD_SPI_Init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[51]"></a>LCD_SPI_Init</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, lcd_st7735.o(i.LCD_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_SPI_Init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
</UL>

<P><STRONG><a name="[1b]"></a>RTC1_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, osal_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC1_IRQHandler &rArr; osal_timer_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_isr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_click
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, osal_timer.o(i.RTC2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ReadPage</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, f_lib.o(i.ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadPage &rArr; ExitDeepSleepMode &rArr; spi_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[61]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 578 bytes, Stack size 8 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_57
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_37
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_32
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_31
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_16
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_136
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_12
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_108
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>U2G</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, hfma2ylib.o(i.U2G))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = U2G &rArr; r_dat_bat &rArr; spi_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_is_ok
</UL>

<P><STRONG><a name="[4c]"></a>WriteComm</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lcd_st7735.o(i.WriteComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteComm
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sync_frame
</UL>

<P><STRONG><a name="[4d]"></a>WriteData</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lcd_st7735.o(i.WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sync_frame
</UL>

<P><STRONG><a name="[46]"></a>WriteDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, f_lib.o(i.WriteDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteDisable &rArr; spi_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>

<P><STRONG><a name="[45]"></a>WriteEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, f_lib.o(i.WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteEnable &rArr; spi_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>

<P><STRONG><a name="[64]"></a>WritePage</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, f_lib.o(i.WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WritePage &rArr; ExitDeepSleepMode &rArr; spi_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[9a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[9b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[85]"></a>button_init</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, button.o(i.button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = button_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[65]"></a>do_sync_frame</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, lcd_st7735.o(i.do_sync_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = do_sync_frame &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFrame
</UL>

<P><STRONG><a name="[66]"></a>font_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, f_lib.o(i.font_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = font_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[69]"></a>font_is_ok</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task_gui.o(i.font_is_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = font_is_ok &rArr; U2G &rArr; r_dat_bat &rArr; spi_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2G
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[6a]"></a>lcd_display</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lcd_st7735.o(i.lcd_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lcd_display &rArr; LCD_SPI_Init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = main &rArr; osal_init_tasks &rArr; taskGUIInit &rArr; osal_start_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_run_system
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4a]"></a>nrf_delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_delay.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[6c]"></a>osalTimerInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, osal_timer.o(i.osalTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osalTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>osal_init_tasks</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, osal_task.o(i.osal_init_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osal_init_tasks &rArr; taskGUIInit &rArr; osal_start_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTouchInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUIInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFrameInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>osal_pwrmgr_powerconserve</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal_pwrmgr.o(i.osal_pwrmgr_powerconserve))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_run_system
</UL>

<P><STRONG><a name="[6f]"></a>osal_run_system</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, osal.o(i.osal_run_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_run_system
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Myset_PRIMASK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Myget_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>osal_set_event</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, osal.o(i.osal_set_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Myset_PRIMASK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Myget_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTouch
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>osal_start_system</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.osal_start_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osal_start_system &rArr; osal_timer_start &rArr; platform_clock_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>osal_start_timerEx</STRONG> (Thumb, 226 bytes, Stack size 20 bytes, osal_timer.o(i.osal_start_timerEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osal_start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTouch
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUIInit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
</UL>

<P><STRONG><a name="[54]"></a>osal_timer_isr</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, osal_timer.o(i.osal_timer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_timer_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>osal_timer_start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osal_timer.o(i.osal_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osal_timer_start &rArr; platform_clock_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
</UL>

<P><STRONG><a name="[63]"></a>r_dat_bat</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, f_lib.o(i.r_dat_bat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_dat_bat &rArr; spi_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2G
</UL>

<P><STRONG><a name="[7f]"></a>show_test_ui</STRONG> (Thumb, 1892 bytes, Stack size 24 bytes, ui_win_main.o(i.show_test_ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = show_test_ui &rArr; DrawUI_Bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
</UL>

<P><STRONG><a name="[68]"></a>spi_configure</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spi_hw.o(i.spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
</UL>

<P><STRONG><a name="[56]"></a>spi_transfer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spi_hw.o(i.spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>

<P><STRONG><a name="[41]"></a>spi_write_byte</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, spi_hw.o(i.spi_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisable
</UL>

<P><STRONG><a name="[81]"></a>sync_frame</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd_st7735.o(i.sync_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sync_frame &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
</UL>

<P><STRONG><a name="[53]"></a>system_clock_click</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clocktick.o(i.system_clock_click))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[34]"></a>taskFrame</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, task_frame.o(i.taskFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = taskFrame &rArr; do_sync_frame &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sync_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>taskFrameInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_frame.o(i.taskFrameInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[33]"></a>taskGUI</STRONG> (Thumb, 1080 bytes, Stack size 32 bytes, task_gui.o(i.taskGUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = taskGUI &rArr; font_is_ok &rArr; U2G &rArr; r_dat_bat &rArr; spi_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config_Delay
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_is_ok
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>taskGUIInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task_gui.o(i.taskGUIInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskGUIInit &rArr; osal_start_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[35]"></a>taskMotor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_motor.o(i.taskMotor))
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>taskMotorInit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, task_motor.o(i.taskMotorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = taskMotorInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[32]"></a>taskTouch</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, task_touch.o(i.taskTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskTouch &rArr; osal_start_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>taskTouchInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_touch.o(i.taskTouchInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[36]"></a>win_main_proc</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, ui_win_main.o(i.win_main_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = win_main_proc &rArr; show_test_ui &rArr; DrawUI_Bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_ui
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>window_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, window.o(i.window_init))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUIInit
</UL>

<P><STRONG><a name="[8d]"></a>window_pop</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, window.o(i.window_pop))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
</UL>

<P><STRONG><a name="[8c]"></a>window_push</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, window.o(i.window_push))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[75]"></a>__Myget_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal.o(i.__Myget_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_run_system
</UL>

<P><STRONG><a name="[76]"></a>__Myset_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal.o(i.__Myset_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_run_system
</UL>

<P><STRONG><a name="[7d]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, osal_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>

<P><STRONG><a name="[7b]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, osal_timer.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>

<P><STRONG><a name="[7e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, osal_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>

<P><STRONG><a name="[7c]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, osal_timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>

<P><STRONG><a name="[79]"></a>platform_clock_init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, osal_timer.o(i.platform_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = platform_clock_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_OSAL_Timer_c_timer__nrf_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
</UL>

<P><STRONG><a name="[7a]"></a>platform_clock_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osal_timer.o(i.platform_clock_start))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
</UL>

<P><STRONG><a name="[8a]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_motor.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorInit
</UL>

<P><STRONG><a name="[82]"></a>nrf_gpio_cfg</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, task_gui.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[83]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_gui.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[84]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_gui.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[8b]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, task_touch.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTouch
</UL>

<P><STRONG><a name="[52]"></a>nrf_gpio_cfg</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, lcd_st7735.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[6b]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd_st7735.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
</UL>

<P><STRONG><a name="[4b]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_st7735.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sync_frame
</UL>

<P><STRONG><a name="[49]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_st7735.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sync_frame
</UL>

<P><STRONG><a name="[67]"></a>nrf_gpio_cfg</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, f_lib.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
</UL>

<P><STRONG><a name="[40]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, f_lib.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisable
</UL>

<P><STRONG><a name="[42]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, f_lib.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisable
</UL>

<P><STRONG><a name="[5f]"></a>errata_108</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_108))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[57]"></a>errata_12</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_12))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[60]"></a>errata_136</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[58]"></a>errata_16</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_16))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[59]"></a>errata_31</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_31))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5a]"></a>errata_32</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_32))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5b]"></a>errata_36</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5c]"></a>errata_37</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_37))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5d]"></a>errata_57</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_57))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5e]"></a>errata_66</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
