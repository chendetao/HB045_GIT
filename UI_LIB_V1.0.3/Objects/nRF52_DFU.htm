<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\nRF52_DFU.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\nRF52_DFU.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Mon Nov 13 10:14:31 2017
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; osal_init_tasks &rArr; taskBleInit &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">NMI_Handler</a><BR>
 <LI><a href="#[23]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">HardFault_Handler</a><BR>
 <LI><a href="#[24]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[25]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">BusFault_Handler</a><BR>
 <LI><a href="#[26]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">UsageFault_Handler</a><BR>
 <LI><a href="#[27]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">SVC_Handler</a><BR>
 <LI><a href="#[28]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">DebugMon_Handler</a><BR>
 <LI><a href="#[29]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">PendSV_Handler</a><BR>
 <LI><a href="#[2a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">SysTick_Handler</a><BR>
 <LI><a href="#[3a]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[1a5]">flash_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[171]">sm_state_change</a><BR>
 <LI><a href="#[171]">sm_state_change</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[171]">sm_state_change</a><BR>
 <LI><a href="#[1a3]">flash_page_erase</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[171]">sm_state_change</a><BR>
 <LI><a href="#[170]">clear_operation_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[171]">sm_state_change</a><BR>
 <LI><a href="#[9c]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9c]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a]">AlphabetToBinaly</a> from qr_encode.o(i.AlphabetToBinaly) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[58]">BMA2x2_SPI_bus_read</a> from bma253.o(i.BMA2x2_SPI_bus_read) referenced from bma253.o(i.bma250_init)
 <LI><a href="#[57]">BMA2x2_SPI_bus_write</a> from bma253.o(i.BMA2x2_SPI_bus_write) referenced from bma253.o(i.bma250_init)
 <LI><a href="#[59]">BMA2x2_delay_msek</a> from bma253.o(i.BMA2x2_delay_msek) referenced from bma253.o(i.bma250_init)
 <LI><a href="#[25]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3a]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3e]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">CountPenalty</a> from qr_encode.o(i.CountPenalty) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[28]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[39]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">EncodeData</a> from qr_encode.o(i.EncodeData) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[4]">EncodeSourceData</a> from qr_encode.o(i.EncodeSourceData) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[4f]">FPU_IRQHandler</a> from fpu.o(i.FPU_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">FormatModule</a> from qr_encode.o(i.FormatModule) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[31]">GPIOTE_IRQHandler</a> from irqhandler.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">GetBitLength</a> from qr_encode.o(i.GetBitLength) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[3]">GetEncodeVersion</a> from qr_encode.o(i.GetEncodeVersion) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[c]">GetRSCodeWord</a> from qr_encode.o(i.GetRSCodeWord) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[23]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4e]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">IsAlphabetData</a> from qr_encode.o(i.IsAlphabetData) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[9]">IsKanjiData</a> from qr_encode.o(i.IsKanjiData) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[7]">IsNumeralData</a> from qr_encode.o(i.IsNumeralData) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[b]">KanjiToBinaly</a> from qr_encode.o(i.KanjiToBinaly) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[49]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[48]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[47]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4a]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4b]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3d]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[38]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[36]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3c]">RTC1_IRQHandler</a> from osal_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4d]">RTC2_IRQHandler</a> from osal_timer.o(i.RTC2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4c]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3f]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[40]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[41]">SWI2_EGU2_IRQHandler</a> from softdevice_handler.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[42]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[43]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[44]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">SetAlignmentPattern</a> from qr_encode.o(i.SetAlignmentPattern) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[6]">SetBitStream</a> from qr_encode.o(i.SetBitStream) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[12]">SetCodeWordPattern</a> from qr_encode.o(i.SetCodeWordPattern) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[f]">SetFinderPattern</a> from qr_encode.o(i.SetFinderPattern) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[14]">SetFormatInfoPattern</a> from qr_encode.o(i.SetFormatInfoPattern) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[e]">SetFunctionModule</a> from qr_encode.o(i.SetFunctionModule) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[13]">SetMaskingPattern</a> from qr_encode.o(i.SetMaskingPattern) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[11]">SetVersionPattern</a> from qr_encode.o(i.SetVersionPattern) referenced 2 times from qr_encode.o(.data)
 <LI><a href="#[2a]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[51]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[37]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[45]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[46]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">UARTE0_UART0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3b]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[52]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[53]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[55]">apple_notification_error_handler</a> from ancs.o(i.apple_notification_error_handler) referenced from ancs.o(i.ancs_service_init)
 <LI><a href="#[61]">ble_evt_dispatch</a> from task_ble.o(i.ble_evt_dispatch) referenced from task_ble.o(i.taskBleInit)
 <LI><a href="#[69]">conn_params_error_handler</a> from task_ble.o(i.conn_params_error_handler) referenced from task_ble.o(i.taskBleInit)
 <LI><a href="#[89]">data_page_erase_state_run</a> from pstorage.o(i.data_page_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[88]">data_to_swap_write_state_run</a> from pstorage.o(i.data_to_swap_write_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[5a]">db_disc_handler</a> from ancs.o(i.db_disc_handler) referenced from ancs.o(i.db_discovery_init)
 <LI><a href="#[63]">device_manager_evt_handler</a> from task_ble.o(i.device_manager_evt_handler) referenced from task_ble.o(i.taskBleInit)
 <LI><a href="#[66]">dfu_app_on_dfu_evt</a> from dfu_app_handler.o(i.dfu_app_on_dfu_evt) referenced from task_ble.o(i.taskBleInit)
 <LI><a href="#[1]">dfu_app_reset_prepare</a> from dfu_app_handler.o(i.dfu_app_reset_prepare) referenced 2 times from dfu_app_handler.o(.data)
 <LI><a href="#[5e]">dm_pstorage_cb_handler</a> from device_manager_peripheral.o(i.dm_pstorage_cb_handler) referenced from device_manager_peripheral.o(i.dm_init)
 <LI><a href="#[5f]">flash_memofy_cb_handler</a> from task_flash.o(i.flash_memofy_cb_handler) referenced from task_flash.o(i.flash_memory_Init)
 <LI><a href="#[80]">gattc_context_apply</a> from device_manager_peripheral.o(i.gattc_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[7c]">gattc_context_load</a> from device_manager_peripheral.o(i.gattc_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[78]">gattc_context_store</a> from device_manager_peripheral.o(i.gattc_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[7f]">gatts_context_apply</a> from device_manager_peripheral.o(i.gatts_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[7b]">gatts_context_load</a> from device_manager_peripheral.o(i.gatts_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[77]">gatts_context_store</a> from device_manager_peripheral.o(i.gatts_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[81]">gattsc_context_apply</a> from device_manager_peripheral.o(i.gattsc_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[7d]">gattsc_context_load</a> from device_manager_peripheral.o(i.gattsc_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[79]">gattsc_context_store</a> from device_manager_peripheral.o(i.gattsc_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[8b]">head_restore_state_run</a> from pstorage.o(i.head_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[50]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7e]">no_service_context_apply</a> from device_manager_peripheral.o(i.no_service_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[7a]">no_service_context_load</a> from device_manager_peripheral.o(i.no_service_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[76]">no_service_context_store</a> from device_manager_peripheral.o(i.no_service_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[65]">nus_data_handler</a> from task_ble.o(i.nus_data_handler) referenced from task_ble.o(i.taskBleInit)
 <LI><a href="#[64]">on_adv_evt</a> from task_ble.o(i.on_adv_evt) referenced from task_ble.o(i.taskBleInit)
 <LI><a href="#[54]">on_ancs_c_evt</a> from ancs.o(i.on_ancs_c_evt) referenced from ancs.o(i.ancs_service_init)
 <LI><a href="#[68]">on_conn_params_evt</a> from task_ble.o(i.on_conn_params_evt) referenced from task_ble.o(i.taskBleInit)
 <LI><a href="#[5b]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[5b]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.dm_application_context_set)
 <LI><a href="#[5b]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[5d]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[5d]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.dm_application_context_set)
 <LI><a href="#[5d]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[67]">reset_prepare</a> from task_ble.o(i.reset_prepare) referenced from task_ble.o(i.taskBleInit)
 <LI><a href="#[60]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[84]">state_erase_data_page_entry_run</a> from pstorage.o(i.state_erase_data_page_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[86]">state_restore_head_entry_run</a> from pstorage.o(i.state_restore_head_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[85]">state_restore_tail_entry_run</a> from pstorage.o(i.state_restore_tail_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[82]">state_swap_erase_entry_run</a> from pstorage.o(i.state_swap_erase_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[83]">state_write_data_swap_entry_run</a> from pstorage.o(i.state_write_data_swap_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[5c]">storage_operation_dummy_handler</a> from device_manager_peripheral.o(i.storage_operation_dummy_handler) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[87]">swap_erase_state_run</a> from pstorage.o(i.swap_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[62]">sys_evt_dispatch</a> from task_ble.o(i.sys_evt_dispatch) referenced from task_ble.o(i.taskBleInit)
 <LI><a href="#[8a]">tail_restore_state_run</a> from pstorage.o(i.tail_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[75]">taskBattery</a> from task_battery.o(i.taskBattery) referenced from osal_task.o(.constdata)
 <LI><a href="#[6a]">taskBle</a> from task_ble.o(i.taskBle) referenced from osal_task.o(.constdata)
 <LI><a href="#[74]">taskFinder</a> from task_finder.o(i.taskFinder) referenced from osal_task.o(.constdata)
 <LI><a href="#[6b]">taskFlash</a> from task_flash.o(i.taskFlash) referenced from osal_task.o(.constdata)
 <LI><a href="#[72]">taskFrame</a> from task_frame.o(i.taskFrame) referenced from osal_task.o(.constdata)
 <LI><a href="#[70]">taskGUI</a> from task_gui.o(i.taskGUI) referenced from osal_task.o(.constdata)
 <LI><a href="#[6f]">taskHr</a> from task_hr.o(i.taskHr) referenced from osal_task.o(.constdata)
 <LI><a href="#[73]">taskMotor</a> from task_motor.o(i.taskMotor) referenced from osal_task.o(.constdata)
 <LI><a href="#[71]">taskStep</a> from task_step.o(i.taskStep) referenced from osal_task.o(.constdata)
 <LI><a href="#[6c]">taskStore</a> from task_store.o(i.taskStore) referenced from osal_task.o(.constdata)
 <LI><a href="#[6e]">taskTouch</a> from task_touch.o(i.taskTouch) referenced from osal_task.o(.constdata)
 <LI><a href="#[6d]">taskUpload</a> from task_upload.o(i.taskUpload) referenced from osal_task.o(.constdata)
 <LI><a href="#[92]">ui_alarm_notify</a> from ui_win_notify.o(i.ui_alarm_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[90]">ui_app_notify</a> from ui_win_notify.o(i.ui_app_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[96]">ui_ble_notify</a> from ui_win_notify.o(i.ui_ble_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[8c]">ui_calling_notify</a> from ui_win_notify.o(i.ui_calling_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[91]">ui_earse_app_notify</a> from ui_win_notify.o(i.ui_earse_app_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[93]">ui_erase_alarm_notify</a> from ui_win_notify.o(i.ui_erase_alarm_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[97]">ui_erase_ble_notify</a> from ui_win_notify.o(i.ui_erase_ble_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[8d]">ui_erase_calling_notify</a> from ui_win_notify.o(i.ui_erase_calling_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[95]">ui_erase_find_me_notify</a> from ui_win_notify.o(i.ui_erase_find_me_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[8f]">ui_erase_message_notify</a> from ui_win_notify.o(i.ui_erase_message_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[99]">ui_erase_sedentary_notify</a> from ui_win_notify.o(i.ui_erase_sedentary_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[94]">ui_find_me_notify</a> from ui_win_notify.o(i.ui_find_me_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[8e]">ui_message_notify</a> from ui_win_notify.o(i.ui_message_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[98]">ui_sedentary_notify</a> from ui_win_notify.o(i.ui_sedentary_notify) referenced from ui_win_notify.o(.constdata)
 <LI><a href="#[56]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[1b]">win_alarm_proc</a> from ui_win_alarm.o(i.win_alarm_proc) referenced 2 times from window.o(.data)
 <LI><a href="#[1c]">win_camera_proc</a> from ui_win_camera.o(i.win_camera_proc) referenced 2 times from window.o(.data)
 <LI><a href="#[1d]">win_findphone_proc</a> from ui_win_findphone.o(i.win_findphone_proc) referenced 2 times from window.o(.data)
 <LI><a href="#[19]">win_hr_proc</a> from ui_win_hr.o(i.win_hr_proc) referenced 2 times from window.o(.data)
 <LI><a href="#[1e]">win_info_proc</a> from ui_win_info.o(i.win_info_proc) referenced 2 times from window.o(.data)
 <LI><a href="#[16]">win_main_proc</a> from ui_win_main.o(i.win_main_proc) referenced 2 times from window.o(.data)
 <LI><a href="#[20]">win_notify_proc</a> from ui_win_notify.o(i.win_notify_proc) referenced 2 times from window.o(.data)
 <LI><a href="#[17]">win_pedometer_proc</a> from ui_win_pedometer.o(i.win_pedometer_proc) referenced 2 times from window.o(.data)
 <LI><a href="#[1f]">win_shutdown_proc</a> from ui_win_shutdown.o(i.win_shutdown_proc) referenced 2 times from window.o(.data)
 <LI><a href="#[1a]">win_sleep_proc</a> from ui_win_sleep.o(i.win_sleep_proc) referenced 2 times from window.o(.data)
 <LI><a href="#[18]">win_sport_proc</a> from ui_win_sport.o(i.win_sport_proc) referenced 2 times from window.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[52]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[212]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[213]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[214]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[215]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[216]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[217]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[165]"></a>__asm___17_bootloader_util_c_c13d365c__bootloader_util_reset</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bootloader_util.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
</UL>

<P><STRONG><a name="[9c]"></a>__asm___11_nrf_delay_c_532987f3__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, nrf_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>

<P><STRONG><a name="[21]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUpload
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUTC
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_UTC_time
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
</UL>

<P><STRONG><a name="[218]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageBuildSender
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageBuildContent
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_get
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_queue
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_temp_queue_put
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_put
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_control_update
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_Init
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[219]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageClearAll
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageBuildSender
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageBuildContent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_pedometer_proc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LATIN_GetData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_erase_message_notify
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_app_notify
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sport_proc
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlash
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_Init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[21d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[df]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[18b]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[1bf]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_update
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_comp_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_level
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_get_comp_blood_pressure_val
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_update
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_comp_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_level
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_get_comp_blood_pressure_val
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_update
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_comp_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_level
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_update
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_get_comp_blood_pressure_val
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_update
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_comp_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_level
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_get_comp_blood_pressure_val
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_update
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_comp_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_get_comp_blood_pressure_val
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_level
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_get_comp_blood_pressure_val
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_m
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_update
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_level
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_m
</UL>

<P><STRONG><a name="[21e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[21f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[220]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[221]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[222]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[223]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[a5]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b3]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[224]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>ASCII_GetData</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, hfma2ylib.o(i.ASCII_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ASCII_GetData &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_show_version
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_information_val
</UL>

<P><STRONG><a name="[b8]"></a>AccelHandle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, step_process.o(i.AccelHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AccelHandle &rArr; Step_main_thread &rArr; calcuZ
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_main_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
</UL>

<P><STRONG><a name="[a]"></a>AlphabetToBinaly</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, qr_encode.o(i.AlphabetToBinaly))
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[140]"></a>BMA_init_spi_pin</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bma253.o(i.BMA_init_spi_pin))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[bb]"></a>CYRILLIC_GetData</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hfma2ylib.o(i.CYRILLIC_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CYRILLIC_GetData &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
</UL>

<P><STRONG><a name="[bc]"></a>Cal_Time</STRONG> (Thumb, 268 bytes, Stack size 28 bytes, clocktick.o(i.Cal_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cal_Time &rArr; Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
</UL>

<P><STRONG><a name="[be]"></a>ConnectionTerminate</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, task_ble.o(i.ConnectionTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ConnectionTerminate &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
</UL>

<P><STRONG><a name="[c3]"></a>Convert_UTC_time</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, clocktick.o(i.Convert_UTC_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Convert_UTC_time &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_algorithm
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepdata
</UL>

<P><STRONG><a name="[15]"></a>CountPenalty</STRONG> (Thumb, 914 bytes, Stack size 24 bytes, qr_encode.o(i.CountPenalty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CountPenalty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>Debug_ble_send_hex</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, debug.o(i.Debug_ble_send_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Debug_ble_send_hex &rArr; bt_protocol_tx &rArr; ble_write_bytes &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHr
</UL>

<P><STRONG><a name="[cb]"></a>DoRect16x16</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, ui_win_notify.o(i.DoRect16x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DoRect16x16
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
</UL>

<P><STRONG><a name="[c8]"></a>DoRect8x16</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, ui_win_notify.o(i.DoRect8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DoRect8x16
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_show_version
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_information_val
</UL>

<P><STRONG><a name="[d0]"></a>DrawCaloriesValue</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, ui_win_sport.o(i.DrawCaloriesValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DrawCaloriesValue &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconSwimming
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconRunning
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconBycle
</UL>

<P><STRONG><a name="[d2]"></a>DrawIcon</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, ui_win_notify.o(i.DrawIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DrawIcon &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_message_notify
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_app_notify
</UL>

<P><STRONG><a name="[d4]"></a>DrawSleepTimer</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, ui_win_sleep.o(i.DrawSleepTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DrawSleepTimer &rArr; UI_Draw_Buttom &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Buttom
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sleep_proc
</UL>

<P><STRONG><a name="[d8]"></a>DrawSportIconBycle</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ui_win_sport.o(i.DrawSportIconBycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DrawSportIconBycle &rArr; DrawSportTimer &rArr; DrawUI_Bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUTC
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportTimer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCaloriesValue
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_sport
</UL>

<P><STRONG><a name="[db]"></a>DrawSportIconMain</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ui_win_sport.o(i.DrawSportIconMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DrawSportIconMain &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_sport
</UL>

<P><STRONG><a name="[dc]"></a>DrawSportIconRunning</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, ui_win_sport.o(i.DrawSportIconRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DrawSportIconRunning &rArr; DrawSportTimer &rArr; DrawUI_Bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUTC
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportTimer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCaloriesValue
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_sport
</UL>

<P><STRONG><a name="[dd]"></a>DrawSportIconSwimming</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, ui_win_sport.o(i.DrawSportIconSwimming))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DrawSportIconSwimming &rArr; DrawSportTimer &rArr; DrawUI_Bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUTC
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportTimer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCaloriesValue
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_sport
</UL>

<P><STRONG><a name="[da]"></a>DrawSportTimer</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, ui_win_sport.o(i.DrawSportTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DrawSportTimer &rArr; DrawUI_Bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconSwimming
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconRunning
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconBycle
</UL>

<P><STRONG><a name="[d6]"></a>DrawUI_Bitmap</STRONG> (Thumb, 172 bytes, Stack size 52 bytes, ui_draw.o(i.DrawUI_Bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DrawUI_Bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_alarm_notify
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_camera_proc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_alarm
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSleepTimer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_hr_stop
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_hr_done
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_sport
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportTimer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconSwimming
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconRunning
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconBycle
</UL>

<P><STRONG><a name="[d1]"></a>DrawUI_Bitmap_Ex</STRONG> (Thumb, 134 bytes, Stack size 52 bytes, ui_draw.o(i.DrawUI_Bitmap_Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DrawUI_Bitmap_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_pedometer_val
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_pedometer
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Title_1
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Title
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Buttom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_sedentary_notify
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_find_me_notify
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_calling_notify
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_ble_notify
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_alarm_notify
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawIcon
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_camera_proc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_information
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_findphone_icon
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_alarm
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSleepTimer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_hr_ready
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_hr_none
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_sport
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconSwimming
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconRunning
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconMain
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconBycle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCaloriesValue
</UL>

<P><STRONG><a name="[1dd]"></a>DrawUI_Bitmap_Rever</STRONG> (Thumb, 134 bytes, Stack size 52 bytes, ui_draw.o(i.DrawUI_Bitmap_Rever))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DrawUI_Bitmap_Rever
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
</UL>

<P><STRONG><a name="[2]"></a>EncodeData</STRONG> (Thumb, 676 bytes, Stack size 56 bytes, qr_encode.o(i.EncodeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EncodeData &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>EncodeSourceData</STRONG> (Thumb, 2014 bytes, Stack size 40 bytes, qr_encode.o(i.EncodeSourceData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EncodeSourceData
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[cf]"></a>EntryDeepSleepMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi.o(i.EntryDeepSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EntryDeepSleepMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_message_notify
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_calling_notify
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_app_notify
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_information
</UL>

<P><STRONG><a name="[c7]"></a>ExitDeepSleepMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi.o(i.ExitDeepSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExitDeepSleepMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_message_notify
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_calling_notify
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_app_notify
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_information
</UL>

<P><STRONG><a name="[4f]"></a>FPU_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fpu.o(i.FPU_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FormatModule</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, qr_encode.o(i.FormatModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FormatModule
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, irqhandler.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOTE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>GetBitLength</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, qr_encode.o(i.GetBitLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetBitLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>GetEncodeVersion</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, qr_encode.o(i.GetEncodeVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetEncodeVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>GetRSCodeWord</STRONG> (Thumb, 140 bytes, Stack size 36 bytes, qr_encode.o(i.GetRSCodeWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetRSCodeWord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[bd]"></a>Get_Week</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, clocktick.o(i.Get_Week))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Time
</UL>

<P><STRONG><a name="[8]"></a>IsAlphabetData</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, qr_encode.o(i.IsAlphabetData))
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>IsKanjiData</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, qr_encode.o(i.IsKanjiData))
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>IsNumeralData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, qr_encode.o(i.IsNumeralData))
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[1b2]"></a>JIS_16_GetData</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hfma2ylib.o(i.JIS_16_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JIS_16_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
</UL>

<P><STRONG><a name="[1b3]"></a>KSC_16_GetData</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, hfma2ylib.o(i.KSC_16_GetData))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
</UL>

<P><STRONG><a name="[b]"></a>KanjiToBinaly</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, qr_encode.o(i.KanjiToBinaly))
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>LATIN_GetData</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, hfma2ylib.o(i.LATIN_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LATIN_GetData &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
</UL>

<P><STRONG><a name="[e4]"></a>LCD_Config</STRONG> (Thumb, 486 bytes, Stack size 16 bytes, lcd_st7735.o(i.LCD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Config &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config_Delay
</UL>

<P><STRONG><a name="[e8]"></a>LCD_Config_Delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd_st7735.o(i.LCD_Config_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_Config_Delay &rArr; LCD_Config &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[e9]"></a>LCD_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd_st7735.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_Init &rArr; LCD_Config &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[ea]"></a>LCD_SPI_Init</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, lcd_st7735.o(i.LCD_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
</UL>

<P><STRONG><a name="[c0]"></a>Log_Printf</STRONG> (Thumb, 114 bytes, Stack size 136 bytes, log.o(i.Log_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Log_Printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionTerminate
</UL>

<P><STRONG><a name="[ed]"></a>MessageBuildContent</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, msgqueue.o(i.MessageBuildContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MessageBuildContent &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_notification
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
</UL>

<P><STRONG><a name="[ee]"></a>MessageBuildSender</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, msgqueue.o(i.MessageBuildSender))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MessageBuildSender &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_notification
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
</UL>

<P><STRONG><a name="[ef]"></a>MessageClearAll</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, msgqueue.o(i.MessageClearAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageClearAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_notification
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
</UL>

<P><STRONG><a name="[20e]"></a>MessageUpdatePage</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, msgqueue.o(i.MessageUpdatePage))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_notify_proc
</UL>

<P><STRONG><a name="[f0]"></a>NOTICE_ADD</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ui_win_notify.o(i.NOTICE_ADD))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFinder
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_notification
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
</UL>

<P><STRONG><a name="[1e3]"></a>Put_the_desktop_process</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sleep_algorithm.o(i.Put_the_desktop_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Put_the_desktop_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_algorithm
</UL>

<P><STRONG><a name="[20f]"></a>QR_Copy_Image</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, qr_utils.o(i.QR_Copy_Image))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QR_Copy_Image
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_pedometer_proc
</UL>

<P><STRONG><a name="[1b8]"></a>QR_Encode_Create</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, qr_utils.o(i.QR_Encode_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QR_Encode_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>RTC1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, osal_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC1_IRQHandler &rArr; system_clock_click &rArr; osal_start_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_click
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>RTC2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, osal_timer.o(i.RTC2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC2_IRQHandler &rArr; hr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, softdevice_handler.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>SaveSleepdata</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, sleep_algorithm.o(i.SaveSleepdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SaveSleepdata &rArr; Convert_UTC_time &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_UTC_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_algorithm
</UL>

<P><STRONG><a name="[f6]"></a>SetAlarm</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, alarm.o(i.SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetAlarm &rArr; __SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SetAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
</UL>

<P><STRONG><a name="[10]"></a>SetAlignmentPattern</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, qr_encode.o(i.SetAlignmentPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetAlignmentPattern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>SetBitStream</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, qr_encode.o(i.SetBitStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetBitStream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>SetCodeWordPattern</STRONG> (Thumb, 140 bytes, Stack size 28 bytes, qr_encode.o(i.SetCodeWordPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetCodeWordPattern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[168]"></a>SetDate</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, clocktick.o(i.SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
</UL>

<P><STRONG><a name="[f]"></a>SetFinderPattern</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, qr_encode.o(i.SetFinderPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetFinderPattern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>SetFormatInfoPattern</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, qr_encode.o(i.SetFormatInfoPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetFormatInfoPattern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>SetFunctionModule</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, qr_encode.o(i.SetFunctionModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetFunctionModule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>SetMaskingPattern</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, qr_encode.o(i.SetMaskingPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetMaskingPattern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[167]"></a>SetTimer</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, clocktick.o(i.SetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
</UL>

<P><STRONG><a name="[11]"></a>SetVersionPattern</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, qr_encode.o(i.SetVersionPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetVersionPattern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qr_encode.o(.data)
</UL>
<P><STRONG><a name="[b9]"></a>Step_main_thread</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, step_process.o(i.Step_main_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Step_main_thread &rArr; calcuZ
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcuZ
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcuY
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcuX
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelHandle
</UL>

<P><STRONG><a name="[51]"></a>SystemInit</STRONG> (Thumb, 660 bytes, Stack size 12 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>U2G</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, hfma2ylib.o(i.U2G))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = U2G &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_is_ok
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
</UL>

<P><STRONG><a name="[cc]"></a>U2J</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, hfma2ylib.o(i.U2J))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = U2J &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
</UL>

<P><STRONG><a name="[c9]"></a>U2K</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, hfma2ylib.o(i.U2K))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = U2K &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
</UL>

<P><STRONG><a name="[d7]"></a>UI_Draw_Buttom</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ui_win_main.o(i.UI_Draw_Buttom))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UI_Draw_Buttom &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_pedometer
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_information
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_findphone_icon
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_alarm
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSleepTimer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_sport
</UL>

<P><STRONG><a name="[fc]"></a>UI_Draw_Title</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ui_win_main.o(i.UI_Draw_Title))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UI_Draw_Title &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_1
</UL>

<P><STRONG><a name="[fd]"></a>UI_Draw_Title_1</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, ui_win_main.o(i.UI_Draw_Title_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UI_Draw_Title_1 &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
</UL>

<P><STRONG><a name="[1e9]"></a>WDT_Feed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdt.o(i.WDT_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBle
</UL>

<P><STRONG><a name="[1e8]"></a>WDT_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wdt.o(i.WDT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBle
</UL>

<P><STRONG><a name="[e6]"></a>WriteComm</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd_st7735.o(i.WriteComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteComm
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sync_frame
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[e7]"></a>WriteData</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, lcd_st7735.o(i.WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sync_frame
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[fe]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[227]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[228]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[229]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[eb]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
</UL>

<P><STRONG><a name="[1f2]"></a>__ARM_common_memclr4_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_ble.o(i.__ARM_common_memclr4_5))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[18f]"></a>__ARM_common_memclr4_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.__ARM_common_memclr4_6))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
</UL>

<P><STRONG><a name="[11f]"></a>__ARM_common_memclr4_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advertising.o(i.__ARM_common_memclr4_7))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[203]"></a>__ARM_common_memclr4_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_upload.o(i.__ARM_common_memclr4_8))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUpload
</UL>

<P><STRONG><a name="[16e]"></a>__ARM_common_memcpy4_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, btprotocol.o(i.__ARM_common_memcpy4_5))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_notification
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
</UL>

<P><STRONG><a name="[10b]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[100]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
</UL>

<P><STRONG><a name="[107]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
</UL>

<P><STRONG><a name="[108]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_m
</UL>

<P><STRONG><a name="[104]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[106]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[10a]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[105]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[103]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[102]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[10c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[22a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[22b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[22c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[101]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[f8]"></a>accel_filter</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step_process.o(i.accel_filter))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_main_thread
</UL>

<P><STRONG><a name="[112]"></a>adv_data_encode</STRONG> (Thumb, 1310 bytes, Stack size 48 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[114]"></a>ancs_perform_notification_action</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ancs.o(i.ancs_perform_notification_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ancs_perform_notification_action &rArr; ble_ancs_perform_notification_action &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_perform_notification_action
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_notify_proc
</UL>

<P><STRONG><a name="[116]"></a>ancs_service_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ancs.o(i.ancs_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ancs_service_init &rArr; ble_ancs_c_init &rArr; ble_db_discovery_evt_register
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_attr_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[119]"></a>app_error_fault_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[c1]"></a>app_error_handler_bare</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBle
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_security_request
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wechat_services_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_dm_appl_instance_set
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_discovery_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_service_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionTerminate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_error_handler
</UL>

<P><STRONG><a name="[11d]"></a>ble_advdata_set</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[11e]"></a>ble_advertising_init</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_7
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[120]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[121]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[bf]"></a>ble_advertising_start</STRONG> (Thumb, 512 bytes, Stack size 64 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_access_status_get
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_queued_op_count_get
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_7
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBle
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionTerminate
</UL>

<P><STRONG><a name="[117]"></a>ble_ancs_c_attr_add</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_ancs_c.o(i.ble_ancs_c_attr_add))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_service_init
</UL>

<P><STRONG><a name="[124]"></a>ble_ancs_c_data_source_notif_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_ancs_c.o(i.ble_ancs_c_data_source_notif_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ancs_c_data_source_notif_enable &rArr; cccd_configure &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[1c2]"></a>ble_ancs_c_handles_assign</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_ancs_c.o(i.ble_ancs_c_handles_assign))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[118]"></a>ble_ancs_c_init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ble_ancs_c.o(i.ble_ancs_c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ancs_c_init &rArr; ble_db_discovery_evt_register
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_evt_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_service_init
</UL>

<P><STRONG><a name="[127]"></a>ble_ancs_c_notif_source_notif_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_ancs_c.o(i.ble_ancs_c_notif_source_notif_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ancs_c_notif_source_notif_enable &rArr; cccd_configure &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[128]"></a>ble_ancs_c_on_ble_evt</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ble_ancs_c.o(i.ble_ancs_c_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_ancs_c_on_ble_evt &rArr; on_evt_gattc_notif
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_evt_gattc_notif
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[178]"></a>ble_ancs_c_on_db_disc_evt</STRONG> (Thumb, 204 bytes, Stack size 88 bytes, ble_ancs_c.o(i.ble_ancs_c_on_db_disc_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_ancs_c_on_db_disc_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_disc_handler
</UL>

<P><STRONG><a name="[12b]"></a>ble_ancs_c_request_attrs</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_ancs_c.o(i.ble_ancs_c_request_attrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ancs_c_request_attrs &rArr; ble_ancs_get_notif_attrs &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_get_notif_attrs
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[12c]"></a>ble_ancs_get_notif_attrs</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ble_ancs_c.o(i.ble_ancs_get_notif_attrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ancs_get_notif_attrs &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_request_attrs
</UL>

<P><STRONG><a name="[115]"></a>ble_ancs_perform_notification_action</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ble_ancs_c.o(i.ble_ancs_perform_notification_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ancs_perform_notification_action &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_perform_notification_action
</UL>

<P><STRONG><a name="[12d]"></a>ble_conn_params_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_conn_params_init &rArr; osal_create_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_create_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[12f]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; conn_params_negotiation
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[132]"></a>ble_conn_params_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_params_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
</UL>

<P><STRONG><a name="[126]"></a>ble_db_discovery_evt_register</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ble_db_discovery.o(i.ble_db_discovery_evt_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_db_discovery_evt_register
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_init
</UL>

<P><STRONG><a name="[17a]"></a>ble_db_discovery_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_db_discovery.o(i.ble_db_discovery_init))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_discovery_init
</UL>

<P><STRONG><a name="[133]"></a>ble_db_discovery_on_ble_evt</STRONG> (Thumb, 718 bytes, Stack size 40 bytes, ble_db_discovery.o(i.ble_db_discovery_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_db_discovery_on_ble_evt &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[181]"></a>ble_db_discovery_start</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ble_db_discovery.o(i.ble_db_discovery_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_db_discovery_start
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
</UL>

<P><STRONG><a name="[1f5]"></a>ble_dfu_init</STRONG> (Thumb, 556 bytes, Stack size 88 bytes, ble_dfu.o(i.ble_dfu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_dfu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[138]"></a>ble_dfu_on_ble_evt</STRONG> (Thumb, 438 bytes, Stack size 72 bytes, ble_dfu.o(i.ble_dfu_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_dfu_on_ble_evt &rArr; ble_dfu_response_send
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_response_send
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[139]"></a>ble_dfu_response_send</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_dfu.o(i.ble_dfu_response_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_dfu_response_send
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_on_ble_evt
</UL>

<P><STRONG><a name="[1f4]"></a>ble_nus_init</STRONG> (Thumb, 454 bytes, Stack size 96 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_nus_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[13b]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[13e]"></a>ble_nus_string_send</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_write_bytes
</UL>

<P><STRONG><a name="[209]"></a>ble_wechat_add_indicate_char</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, ble_wechat_service.o(i.ble_wechat_add_indicate_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_wechat_add_indicate_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wechat_services_init
</UL>

<P><STRONG><a name="[13c]"></a>ble_wechat_on_ble_evt</STRONG> (Thumb, 200 bytes, Stack size 4 bytes, ble_wechat_service.o(i.ble_wechat_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ble_wechat_on_ble_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[13d]"></a>ble_write_bytes</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_ble.o(i.ble_write_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_write_bytes &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_tx
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
</UL>

<P><STRONG><a name="[13f]"></a>bma250_init</STRONG> (Thumb, 812 bytes, Stack size 16 bytes, bma253.o(i.bma250_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bma250_init &rArr; bma2x2_set_power_mode &rArr; bma2x2_set_mode_value
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA_init_spi_pin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_soft_rst
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_sleep_timer_mode
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_sleep_durn
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_range
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_power_mode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_latch_intr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_intr_output_type
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_intr_level
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_intr_fifo_wm
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_intr2_fifo_wm
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_fifo_wml_trig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_fifo_mode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_fifo_data_select
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_bw
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_rst_intr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_sleep_timer_mode
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_sleep_durn
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_range
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_power_mode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_latch_intr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_intr_output_type
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_intr_level
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_intr_fifo_wm
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_intr2_fifo_wm
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_fifo_wml_trig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_fifo_mode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_fifo_data_select
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_bw
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_bma250_to_deep_sleep
</UL>

<P><STRONG><a name="[147]"></a>bma2x2_get_bw</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_bw
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[152]"></a>bma2x2_get_fifo_data_select</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_fifo_data_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_fifo_data_select
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[154]"></a>bma2x2_get_fifo_mode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_fifo_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_fifo_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[156]"></a>bma2x2_get_fifo_wml_trig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_fifo_wml_trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_fifo_wml_trig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[15a]"></a>bma2x2_get_intr2_fifo_wm</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_intr2_fifo_wm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_intr2_fifo_wm
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[158]"></a>bma2x2_get_intr_fifo_wm</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_intr_fifo_wm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_intr_fifo_wm
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[14b]"></a>bma2x2_get_intr_level</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_intr_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_intr_level
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[149]"></a>bma2x2_get_intr_output_type</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_intr_output_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_intr_output_type
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[14e]"></a>bma2x2_get_latch_intr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_latch_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_latch_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[145]"></a>bma2x2_get_power_mode</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, bma2x2.o(i.bma2x2_get_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bma2x2_get_power_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_bma250_to_deep_sleep
</UL>

<P><STRONG><a name="[150]"></a>bma2x2_get_range</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_range
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[15c]"></a>bma2x2_get_sleep_durn</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_sleep_durn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_sleep_durn
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[15e]"></a>bma2x2_get_sleep_timer_mode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bma2x2.o(i.bma2x2_get_sleep_timer_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bma2x2_get_sleep_timer_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[142]"></a>bma2x2_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bma2x2_init &rArr; bma2x2_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[201]"></a>bma2x2_read_accel_xyz_fifo</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bma2x2.o(i.bma2x2_read_accel_xyz_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bma2x2_read_accel_xyz_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
</UL>

<P><STRONG><a name="[15f]"></a>bma2x2_read_reg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bma2x2.o(i.bma2x2_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bma2x2_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_fifo_mode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_fifo_data_select
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_init
</UL>

<P><STRONG><a name="[14c]"></a>bma2x2_rst_intr</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_rst_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_rst_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[146]"></a>bma2x2_set_bw</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_bw
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[151]"></a>bma2x2_set_fifo_data_select</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_fifo_data_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bma2x2_set_fifo_data_select &rArr; bma2x2_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[153]"></a>bma2x2_set_fifo_mode</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_fifo_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bma2x2_set_fifo_mode &rArr; bma2x2_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[155]"></a>bma2x2_set_fifo_wml_trig</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_fifo_wml_trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_fifo_wml_trig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[159]"></a>bma2x2_set_intr2_fifo_wm</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_intr2_fifo_wm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_intr2_fifo_wm
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[157]"></a>bma2x2_set_intr_fifo_wm</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_intr_fifo_wm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_intr_fifo_wm
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[14a]"></a>bma2x2_set_intr_level</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_intr_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_intr_level
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[148]"></a>bma2x2_set_intr_output_type</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_intr_output_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_intr_output_type
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[14d]"></a>bma2x2_set_latch_intr</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_latch_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_latch_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[160]"></a>bma2x2_set_mode_value</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, bma2x2.o(i.bma2x2_set_mode_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bma2x2_set_mode_value
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_power_mode
</UL>

<P><STRONG><a name="[144]"></a>bma2x2_set_power_mode</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, bma2x2.o(i.bma2x2_set_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bma2x2_set_power_mode &rArr; bma2x2_set_mode_value
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_mode_value
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_bma250_to_deep_sleep
</UL>

<P><STRONG><a name="[14f]"></a>bma2x2_set_range</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_range
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[15b]"></a>bma2x2_set_sleep_durn</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_sleep_durn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_sleep_durn
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[15d]"></a>bma2x2_set_sleep_timer_mode</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_sleep_timer_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_sleep_timer_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[143]"></a>bma2x2_soft_rst</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bma2x2.o(i.bma2x2_soft_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bma2x2_soft_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[161]"></a>bond_data_load</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.bond_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bond_data_load &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[164]"></a>bootloader_util_app_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bootloader_util.o(i.bootloader_util_app_start))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_bootloader_util_c_c13d365c__bootloader_util_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[166]"></a>bt_protocol_rx</STRONG> (Thumb, 2788 bytes, Stack size 32 bytes, btprotocol.o(i.bt_protocol_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bt_protocol_rx &rArr; unit_update &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_update
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_pedometer
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_is_ok
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_write_bytes
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_notification
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_next_Alarm
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[c5]"></a>bt_protocol_tx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btprotocol.o(i.bt_protocol_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_protocol_tx &rArr; ble_write_bytes &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_write_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUpload
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStore
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlash
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFinder
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBattery
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_ble_send_hex
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_notify_proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_camera_proc
</UL>

<P><STRONG><a name="[1fb]"></a>button_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, button.o(i.button_init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[169]"></a>calc_next_Alarm</STRONG> (Thumb, 314 bytes, Stack size 96 bytes, alarm.o(i.calc_next_Alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = calc_next_Alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUIInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
</UL>

<P><STRONG><a name="[f9]"></a>calcuX</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, step_process.o(i.calcuX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calcuX
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_main_thread
</UL>

<P><STRONG><a name="[fa]"></a>calcuY</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, step_process.o(i.calcuY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calcuY
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_main_thread
</UL>

<P><STRONG><a name="[fb]"></a>calcuZ</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, step_process.o(i.calcuZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calcuZ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_main_thread
</UL>

<P><STRONG><a name="[1b7]"></a>covert_int2str</STRONG> (Thumb, 140 bytes, Stack size 4 bytes, main.o(i.covert_int2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = covert_int2str
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>db_discovery_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ancs.o(i.db_discovery_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = db_discovery_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[17b]"></a>decompressbmp16</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, hfma2ylib.o(i.decompressbmp16))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unziphfmex
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
</UL>

<P><STRONG><a name="[182]"></a>dfu_app_dm_appl_instance_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dfu_app_handler.o(i.dfu_app_dm_appl_instance_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_app_dm_appl_instance_set &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_instance_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[66]"></a>dfu_app_on_dfu_evt</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, dfu_app_handler.o(i.dfu_app_on_dfu_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dfu_app_on_dfu_evt &rArr; dm_distributed_keys_get &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_disable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_response_send
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_timer_disable
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_peer_addr_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_get
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_distributed_keys_get
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_ble.o(i.taskBleInit)
</UL>
<P><STRONG><a name="[1f6]"></a>dfu_app_reset_prepare_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfu_app_handler.o(i.dfu_app_reset_prepare_set))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[17f]"></a>dm_application_context_delete</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.dm_application_context_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dm_application_context_delete &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
</UL>

<P><STRONG><a name="[17e]"></a>dm_application_context_get</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.dm_application_context_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dm_application_context_get &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
</UL>

<P><STRONG><a name="[18a]"></a>dm_application_context_set</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.dm_application_context_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dm_application_context_set &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[183]"></a>dm_application_instance_set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.dm_application_instance_set))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_dm_appl_instance_set
</UL>

<P><STRONG><a name="[13a]"></a>dm_ble_evt_handler</STRONG> (Thumb, 1438 bytes, Stack size 96 bytes, device_manager_peripheral.o(i.dm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dm_ble_evt_handler &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_7
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[188]"></a>dm_distributed_keys_get</STRONG> (Thumb, 182 bytes, Stack size 72 bytes, device_manager_peripheral.o(i.dm_distributed_keys_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dm_distributed_keys_get &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[187]"></a>dm_handle_get</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, device_manager_peripheral.o(i.dm_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dm_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[18e]"></a>dm_init</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, device_manager_peripheral.o(i.dm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dm_init &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_7
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[189]"></a>dm_peer_addr_get</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.dm_peer_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[191]"></a>dm_register</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.dm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dm_register
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[1e1]"></a>dm_security_setup_req</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.dm_security_setup_req))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_security_request
</UL>

<P><STRONG><a name="[180]"></a>dm_security_status_req</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.dm_security_status_req))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_security_request
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
</UL>

<P><STRONG><a name="[192]"></a>do_sync_frame</STRONG> (Thumb, 332 bytes, Stack size 44 bytes, lcd_st7735.o(i.do_sync_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = do_sync_frame &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFrame
</UL>

<P><STRONG><a name="[d3]"></a>draw_bitmap</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ui_draw.o(i.draw_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawIcon
</UL>

<P><STRONG><a name="[d5]"></a>draw_fill</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, ui_draw.o(i.draw_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = draw_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_pedometer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_sedentary_notify
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_message_notify
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_find_me_notify
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_erase_calling_notify
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_calling_notify
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_ble_notify
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_alarm_notify
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_camera_proc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_information
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_findphone_proc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_alarm
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSleepTimer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_sport
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconSwimming
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconRunning
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconMain
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconBycle
</UL>

<P><STRONG><a name="[1dc]"></a>draw_line</STRONG> (Thumb, 478 bytes, Stack size 16 bytes, ui_draw.o(i.draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
</UL>

<P><STRONG><a name="[1c1]"></a>enc_get_utf8_size</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, u2k.o(i.enc_get_utf8_size))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
</UL>

<P><STRONG><a name="[1c0]"></a>enc_utf8_to_unicode_one</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, u2k.o(i.enc_utf8_to_unicode_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enc_utf8_to_unicode_one
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
</UL>

<P><STRONG><a name="[109]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[193]"></a>fft</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fft.o(i.fft))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fft &rArr; fft_
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHr
</UL>

<P><STRONG><a name="[194]"></a>fft_</STRONG> (Thumb, 432 bytes, Stack size 36 bytes, fft.o(i.fft_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fft_
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin_tab
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_reset
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
</UL>

<P><STRONG><a name="[196]"></a>fft_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fft.o(i.fft_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fft_init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_m
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHrInit
</UL>

<P><STRONG><a name="[197]"></a>fft_m</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, fft.o(i.fft_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fft_m &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_frecency
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_reset
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_init
</UL>

<P><STRONG><a name="[1ae]"></a>fft_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fft.o(i.fft_put))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_callback
</UL>

<P><STRONG><a name="[198]"></a>fft_reset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fft.o(i.fft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fft_reset &rArr; fft_m &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_m
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHr
</UL>

<P><STRONG><a name="[19a]"></a>flash_memory_Init</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, task_flash.o(i.flash_memory_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = flash_memory_Init &rArr; load_config_from_flash &rArr; load_pedometer &rArr; unit_update &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_config_default
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_config_from_flash
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlash
</UL>

<P><STRONG><a name="[19e]"></a>flash_memory_control_update</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, task_flash.o(i.flash_memory_control_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = flash_memory_control_update &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlash
</UL>

<P><STRONG><a name="[19f]"></a>flash_memory_get</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, task_flash.o(i.flash_memory_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_memory_get &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlash
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_queue
</UL>

<P><STRONG><a name="[1a0]"></a>flash_memory_put</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, task_flash.o(i.flash_memory_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_memory_put &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlash
</UL>

<P><STRONG><a name="[199]"></a>flash_memory_update</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, task_flash.o(i.flash_memory_update))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memofy_cb_handler
</UL>

<P><STRONG><a name="[1a4]"></a>flash_temp_queue_put</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, task_flash.o(i.flash_temp_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_temp_queue_put &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStore
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlash
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_test_data
</UL>

<P><STRONG><a name="[1a6]"></a>font_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi.o(i.font_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = font_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init_spi_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
</UL>

<P><STRONG><a name="[1a7]"></a>font_init_spi_pin</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, spi.o(i.font_init_spi_pin))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
</UL>

<P><STRONG><a name="[16c]"></a>font_is_ok</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ui_win_notify.o(i.font_is_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = font_is_ok &rArr; U2G &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2G
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
</UL>

<P><STRONG><a name="[123]"></a>fs_queued_op_count_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fstorage.o(i.fs_queued_op_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[1f3]"></a>gain_mac</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.gain_mac))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[1a8]"></a>generate_test_data</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, sleep_algorithm.o(i.generate_test_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = generate_test_data &rArr; flash_temp_queue_put &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_temp_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
</UL>

<P><STRONG><a name="[11c]"></a>getBattery</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, looktable.o(i.getBattery))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_level
</UL>

<P><STRONG><a name="[d9]"></a>getUTC</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, clocktick.o(i.getUTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = getUTC &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStore
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sport_proc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconSwimming
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconRunning
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconBycle
</UL>

<P><STRONG><a name="[1a9]"></a>get_max_frecency</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, fft.o(i.get_max_frecency))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_max_frecency &rArr; fft_m &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_m
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_get
</UL>

<P><STRONG><a name="[1b1]"></a>gt</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, hfma2ylib.o(i.gt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
</UL>

<P><STRONG><a name="[1ab]"></a>heart_comp_init</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, heartcomp.o(i.heart_comp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = heart_comp_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStepInit
</UL>

<P><STRONG><a name="[202]"></a>heart_comp_pedometer</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, heartcomp.o(i.heart_comp_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = heart_comp_pedometer
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
</UL>

<P><STRONG><a name="[1ac]"></a>heart_get_comp_blood_pressure_val</STRONG> (Thumb, 534 bytes, Stack size 64 bytes, heartcomp.o(i.heart_get_comp_blood_pressure_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = heart_get_comp_blood_pressure_val &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHr
</UL>

<P><STRONG><a name="[1ff]"></a>heart_get_comp_spo2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, heartcomp.o(i.heart_get_comp_spo2))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHr
</UL>

<P><STRONG><a name="[1fe]"></a>heart_set_base_heart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heartcomp.o(i.heart_set_base_heart))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHr
</UL>

<P><STRONG><a name="[f3]"></a>hr_callback</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, task_hr.o(i.hr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_put
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC2_IRQHandler
</UL>

<P><STRONG><a name="[200]"></a>hr_clock_rtc_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, osal_timer.o(i.hr_clock_rtc_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHrInit
</UL>

<P><STRONG><a name="[1fd]"></a>hr_clock_rtc_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osal_timer.o(i.hr_clock_rtc_start))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHr
</UL>

<P><STRONG><a name="[1b0]"></a>hr_clock_rtc_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osal_timer.o(i.hr_clock_rtc_stop))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_timer_disable
</UL>

<P><STRONG><a name="[1af]"></a>hr_get</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, task_hr.o(i.hr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hr_get &rArr; get_max_frecency &rArr; fft_m &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_frecency
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHr
</UL>

<P><STRONG><a name="[185]"></a>hr_timer_disable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, task_hr.o(i.hr_timer_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hr_timer_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_clock_rtc_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[ca]"></a>hzbmp16</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, hfma2ylib.o(i.hzbmp16))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdram_map
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompressbmp16
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KSC_16_GetData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIS_16_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
</UL>

<P><STRONG><a name="[f4]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>lcd_display</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lcd_st7735.o(i.lcd_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_display &rArr; osal_start_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_pedometer_proc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_notify_proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_camera_proc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_info_proc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_findphone_proc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_alarm_proc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sleep_proc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sport_proc
</UL>

<P><STRONG><a name="[1b4]"></a>lcdram_map</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hfma2ylib.o(i.lcdram_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcdram_map
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
</UL>

<P><STRONG><a name="[19d]"></a>load_config_from_flash</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, task_flash.o(i.load_config_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = load_config_from_flash &rArr; load_pedometer &rArr; unit_update &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_pedometer
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_date_time
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_Init
</UL>

<P><STRONG><a name="[1b5]"></a>load_date_time</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clocktick.o(i.load_date_time))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_config_from_flash
</UL>

<P><STRONG><a name="[16b]"></a>load_pedometer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, task_step.o(i.load_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = load_pedometer &rArr; unit_update &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_update
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_config_from_flash
</UL>

<P><STRONG><a name="[1b6]"></a>load_queue</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, task_upload.o(i.load_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = load_queue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUpload
</UL>

<P><STRONG><a name="[50]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = main &rArr; osal_init_tasks &rArr; taskBleInit &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_run_system
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Encode_Create
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;covert_int2str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1bd]"></a>make_bma250_to_deep_sleep</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bma253.o(i.make_bma250_to_deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = make_bma250_to_deep_sleep &rArr; bma250_init &rArr; bma2x2_set_power_mode &rArr; bma2x2_set_mode_value
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_power_mode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_power_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
</UL>

<P><STRONG><a name="[186]"></a>motor_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_motor.o(i.motor_disable))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[1c3]"></a>notify_remove</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, btprotocol.o(i.notify_remove))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[e5]"></a>nrf_delay_ms</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_delay.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[1ad]"></a>nrf_saadc_channel_init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, nrf_saadc.o(i.nrf_saadc_channel_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_callback
</UL>

<P><STRONG><a name="[1b9]"></a>osalTimerInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osal_timer.o(i.osalTimerInit))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[211]"></a>osal_clear_event</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, osal.o(i.osal_clear_event))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
</UL>

<P><STRONG><a name="[12e]"></a>osal_create_timer</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, osal_timer.o(i.osal_create_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osal_create_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[1ba]"></a>osal_init_tasks</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, osal_task.o(i.osal_init_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = osal_init_tasks &rArr; taskBleInit &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUploadInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTouchInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStoreInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStepInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHrInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUIInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFrameInit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlashInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFinderInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBatteryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d0]"></a>osal_pwrmgr_powerconserve</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, osal_pwrmgr.o(i.osal_pwrmgr_powerconserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_pwrmgr_powerconserve &rArr; power_manage &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_run_system
</UL>

<P><STRONG><a name="[1bc]"></a>osal_run_system</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, osal.o(i.osal_run_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osal_run_system &rArr; osal_pwrmgr_powerconserve &rArr; power_manage &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>osal_set_event</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, osal.o(i.osal_set_event))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTouch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStore
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotor
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlashInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlash
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBle
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBatteryInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBattery
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_security_request
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTICE_ADD
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_click
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_get
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_queue
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_temp_queue_put
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_window_manager
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_callback
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memofy_cb_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_pedometer_proc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_notify_proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_camera_proc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_info_proc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_findphone_proc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_alarm_proc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sleep_proc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sport_proc
</UL>

<P><STRONG><a name="[1bb]"></a>osal_start_system</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal.o(i.osal_start_system))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>osal_start_timer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, osal_timer.o(i.osal_start_timer))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[c2]"></a>osal_start_timerEx</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, osal_timer.o(i.osal_start_timerEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osal_start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUpload
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTouch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStore
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStepInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotor
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHrInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskHr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUIInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlash
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFinder
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBattery
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_click
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionTerminate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_pedometer_proc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_notify_proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_camera_proc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_info_proc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_findphone_proc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_alarm_proc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sleep_proc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sport_proc
</UL>

<P><STRONG><a name="[131]"></a>osal_stop_timer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, osal_timer.o(i.osal_stop_timer))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[1f8]"></a>osal_stop_timerEx</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, osal_timer.o(i.osal_stop_timerEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osal_stop_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFinder
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
</UL>

<P><STRONG><a name="[f2]"></a>osal_timer_isr</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, osal_timer.o(i.osal_timer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osal_timer_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[1d2]"></a>osal_timer_start</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, osal_timer.o(i.osal_timer_start))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
</UL>

<P><STRONG><a name="[1d1]"></a>power_manage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, task_ble.o(i.power_manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = power_manage &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve
</UL>

<P><STRONG><a name="[122]"></a>pstorage_access_status_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_access_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[162]"></a>pstorage_block_identifier_get</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_block_identifier_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_get
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_get
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_put
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_control_update
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_distributed_keys_get
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
</UL>

<P><STRONG><a name="[18d]"></a>pstorage_clear</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pstorage_clear &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[1f1]"></a>pstorage_init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[163]"></a>pstorage_load</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_get
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_get
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_load
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_put
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_control_update
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_distributed_keys_get
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
</UL>

<P><STRONG><a name="[190]"></a>pstorage_register</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pstorage_register
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_Init
</UL>

<P><STRONG><a name="[5b]"></a>pstorage_store</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pstorage_store &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Address Reference Count : 3]<UL><LI> device_manager_peripheral.o(i.device_context_store)
<LI> device_manager_peripheral.o(i.dm_application_context_set)
<LI> device_manager_peripheral.o(i.gatts_context_store)
</UL>
<P><STRONG><a name="[1d3]"></a>pstorage_sys_event_handler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pstorage_sys_event_handler &rArr; flash_operation_success_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[5d]"></a>pstorage_update</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pstorage_update &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_put
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_control_update
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
</UL>
<BR>[Address Reference Count : 3]<UL><LI> device_manager_peripheral.o(i.device_context_store)
<LI> device_manager_peripheral.o(i.dm_application_context_set)
<LI> device_manager_peripheral.o(i.gatts_context_store)
</UL>
<P><STRONG><a name="[b7]"></a>r_dat_bat</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, spi.o(i.r_dat_bat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2K
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2J
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2G
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LATIN_GetData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYRILLIC_GetData
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_GetData
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unziphfmex
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompressbmp16
</UL>

<P><STRONG><a name="[1e6]"></a>saadc_buffer_convert</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssadc.o(i.saadc_buffer_convert))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBattery
</UL>

<P><STRONG><a name="[1d4]"></a>saadc_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ssadc.o(i.saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = saadc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBattery
</UL>

<P><STRONG><a name="[1ed]"></a>sd_check_ram_start</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, softdevice_handler.o(i.sd_check_ram_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sd_check_ram_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[1d5]"></a>show_alarm</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, ui_win_alarm.o(i.show_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = show_alarm &rArr; UI_Draw_Buttom &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Buttom
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_alarm_proc
</UL>

<P><STRONG><a name="[1d6]"></a>show_findphone_icon</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, ui_win_findphone.o(i.show_findphone_icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = show_findphone_icon &rArr; UI_Draw_Buttom &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Buttom
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_findphone_proc
</UL>

<P><STRONG><a name="[1d7]"></a>show_information</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ui_win_info.o(i.show_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = show_information &rArr; UI_Draw_Buttom &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Buttom
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_show_version
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_information_val
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_info_proc
</UL>

<P><STRONG><a name="[1d8]"></a>show_information_val</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, ui_win_info.o(i.show_information_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = show_information_val &rArr; ASCII_GetData &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRect8x16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_information
</UL>

<P><STRONG><a name="[1da]"></a>show_main_ui_style_1</STRONG> (Thumb, 866 bytes, Stack size 56 bytes, ui_win_main.o(i.show_main_ui_style_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = show_main_ui_style_1 &rArr; UI_Draw_Title &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Title
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
</UL>

<P><STRONG><a name="[1db]"></a>show_main_ui_style_2</STRONG> (Thumb, 522 bytes, Stack size 72 bytes, ui_win_main.o(i.show_main_ui_style_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = show_main_ui_style_2 &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Rever
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Title_1
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
</UL>

<P><STRONG><a name="[1de]"></a>show_pedometer</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ui_win_pedometer.o(i.show_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = show_pedometer &rArr; show_pedometer_val &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_pedometer_val
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Buttom
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_pedometer_proc
</UL>

<P><STRONG><a name="[1df]"></a>show_pedometer_val</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ui_win_pedometer.o(i.show_pedometer_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = show_pedometer_val &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_pedometer
</UL>

<P><STRONG><a name="[1e0]"></a>show_ui_version</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ui_win_notify.o(i.show_ui_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = show_ui_version &rArr; DrawTitle &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
</UL>

<P><STRONG><a name="[195]"></a>sin_tab</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, fft.o(i.sin_tab))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_
</UL>

<P><STRONG><a name="[1aa]"></a>slave_security_request</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ancs.o(i.slave_security_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slave_security_request &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_security_status_req
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_security_setup_req
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_notification
</UL>

<P><STRONG><a name="[1e2]"></a>sleep_algorithm</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, sleep_algorithm.o(i.sleep_algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sleep_algorithm &rArr; SaveSleepdata &rArr; Convert_UTC_time &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_UTC_time
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepdata
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Put_the_desktop_process
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
</UL>

<P><STRONG><a name="[1ef]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[1ee]"></a>softdevice_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[1ec]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[60]"></a>softdevice_fault_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[1eb]"></a>softdevice_handler_init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[1f0]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[141]"></a>spi_configure</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, spi_hw.o(i.spi_configure))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
</UL>

<P><STRONG><a name="[ba]"></a>spi_transfer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, spi_hw.o(i.spi_transfer))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA2x2_SPI_bus_write
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA2x2_SPI_bus_read
</UL>

<P><STRONG><a name="[e2]"></a>spi_write_byte</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, spi_hw.o(i.spi_write_byte))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>

<P><STRONG><a name="[19b]"></a>store_config_default</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, task_flash.o(i.store_config_default))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_Init
</UL>

<P><STRONG><a name="[1f9]"></a>store_current_config</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, task_flash.o(i.store_current_config))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlash
</UL>

<P><STRONG><a name="[1e4]"></a>store_queue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, task_upload.o(i.store_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = store_queue &rArr; flash_memory_get &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUpload
</UL>

<P><STRONG><a name="[1e5]"></a>sync_frame</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_st7735.o(i.sync_frame))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_pedometer_proc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_sedentary_notify
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_message_notify
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_find_me_notify
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_erase_message_notify
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_erase_calling_notify
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_calling_notify
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_ble_notify
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_app_notify
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_alarm_notify
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_camera_proc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_info_proc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_findphone_proc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_alarm_proc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sleep_proc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sport_proc
</UL>

<P><STRONG><a name="[f1]"></a>system_clock_click</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, clocktick.o(i.system_clock_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = system_clock_click &rArr; osal_start_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>taskBattery</STRONG> (Thumb, 982 bytes, Stack size 72 bytes, task_battery.o(i.taskBattery))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = taskBattery &rArr; battery_get_level &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_tx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_window_manager
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_buffer_convert
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>taskBatteryInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_battery.o(i.taskBatteryInit))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[6a]"></a>taskBle</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, task_ble.o(i.taskBle))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = taskBle &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_security_request
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_tx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wechat_indicate_pedometer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>taskBleInit</STRONG> (Thumb, 568 bytes, Stack size 136 bytes, task_ble.o(i.taskBleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = taskBleInit &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain_mac
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wechat_services_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_ram_start
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_reset_prepare_set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_dm_appl_instance_set
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_discovery_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_service_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_5
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[74]"></a>taskFinder</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, task_finder.o(i.taskFinder))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = taskFinder &rArr; bt_protocol_tx &rArr; ble_write_bytes &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTICE_ADD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_tx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_window_manager
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>taskFinderInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_finder.o(i.taskFinderInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[6b]"></a>taskFlash</STRONG> (Thumb, 736 bytes, Stack size 64 bytes, task_flash.o(i.taskFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = taskFlash &rArr; flash_memory_Init &rArr; load_config_from_flash &rArr; load_pedometer &rArr; unit_update &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_tx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_temp_queue_put
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_current_config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_put
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_control_update
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>taskFlashInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_flash.o(i.taskFlashInit))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[72]"></a>taskFrame</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, task_frame.o(i.taskFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = taskFrame &rArr; do_sync_frame &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sync_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>taskFrameInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_frame.o(i.taskFrameInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[70]"></a>taskGUI</STRONG> (Thumb, 768 bytes, Stack size 24 bytes, task_gui.o(i.taskGUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = taskGUI &rArr; calc_next_Alarm
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_is_ok
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTICE_ADD
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_next_Alarm
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config_Delay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>taskGUIInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, task_gui.o(i.taskGUIInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = taskGUIInit &rArr; calc_next_Alarm
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_next_Alarm
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[6f]"></a>taskHr</STRONG> (Thumb, 950 bytes, Stack size 56 bytes, task_hr.o(i.taskHr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = taskHr &rArr; heart_get_comp_blood_pressure_val &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_clock_rtc_stop
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_clock_rtc_start
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_set_base_heart
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_get_comp_spo2
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_get_comp_blood_pressure_val
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_reset
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_ble_send_hex
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>taskHrInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, task_hr.o(i.taskHrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = taskHrInit &rArr; fft_init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_clock_rtc_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[73]"></a>taskMotor</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, task_motor.o(i.taskMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = taskMotor &rArr; osal_start_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>taskMotorInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, task_motor.o(i.taskMotorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = taskMotorInit &rArr; osal_start_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[71]"></a>taskStep</STRONG> (Thumb, 2490 bytes, Stack size 80 bytes, task_step.o(i.taskStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = taskStep &rArr; unit_update &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_update
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTICE_ADD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_tx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Time
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_algorithm
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_comp_pedometer
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_test_data
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_temp_queue_put
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_read_accel_xyz_fifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma250_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelHandle
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_window_manager
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>taskStepInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, task_step.o(i.taskStepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = taskStepInit &rArr; heart_comp_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_comp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[6c]"></a>taskStore</STRONG> (Thumb, 1350 bytes, Stack size 48 bytes, task_store.o(i.taskStore))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = taskStore &rArr; getUTC &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_tx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUTC
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_temp_queue_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>taskStoreInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_store.o(i.taskStoreInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[6e]"></a>taskTouch</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, task_touch.o(i.taskTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskTouch &rArr; osal_start_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>taskTouchInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_touch.o(i.taskTouchInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[6d]"></a>taskUpload</STRONG> (Thumb, 3926 bytes, Stack size 128 bytes, task_upload.o(i.taskUpload))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = taskUpload &rArr; store_queue &rArr; flash_memory_get &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_tx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_queue
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_queue
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>taskUploadInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_upload.o(i.taskUploadInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_tasks
</UL>

<P><STRONG><a name="[92]"></a>ui_alarm_notify</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ui_win_notify.o(i.ui_alarm_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ui_alarm_notify &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>ui_app_notify</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ui_win_notify.o(i.ui_app_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ui_app_notify &rArr; DrawTitle &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawIcon
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>ui_ble_notify</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ui_win_notify.o(i.ui_ble_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ui_ble_notify &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>ui_calling_notify</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ui_win_notify.o(i.ui_calling_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ui_calling_notify &rArr; DrawTitle &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>ui_earse_app_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ui_win_notify.o(i.ui_earse_app_notify))
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>ui_erase_alarm_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ui_win_notify.o(i.ui_erase_alarm_notify))
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>ui_erase_ble_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ui_win_notify.o(i.ui_erase_ble_notify))
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>ui_erase_calling_notify</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ui_win_notify.o(i.ui_erase_calling_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ui_erase_calling_notify &rArr; draw_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>ui_erase_find_me_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ui_win_notify.o(i.ui_erase_find_me_notify))
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ui_erase_message_notify</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ui_win_notify.o(i.ui_erase_message_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui_erase_message_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>ui_erase_sedentary_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ui_win_notify.o(i.ui_erase_sedentary_notify))
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>ui_find_me_notify</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ui_win_notify.o(i.ui_find_me_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ui_find_me_notify &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>ui_message_notify</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ui_win_notify.o(i.ui_message_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ui_message_notify &rArr; DrawTitle &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawIcon
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTitle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBody
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>ui_sedentary_notify</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ui_win_notify.o(i.ui_sedentary_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ui_sedentary_notify &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_win_notify.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>ui_show_version</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ui_win_info.o(i.ui_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ui_show_version &rArr; ASCII_GetData &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRect8x16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_information
</UL>

<P><STRONG><a name="[204]"></a>ui_win_hr_done</STRONG> (Thumb, 622 bytes, Stack size 40 bytes, ui_win_hr.o(i.ui_win_hr_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ui_win_hr_done &rArr; DrawUI_Bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
</UL>

<P><STRONG><a name="[205]"></a>ui_win_hr_none</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ui_win_hr.o(i.ui_win_hr_none))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ui_win_hr_none &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
</UL>

<P><STRONG><a name="[206]"></a>ui_win_hr_ready</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ui_win_hr.o(i.ui_win_hr_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ui_win_hr_ready &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
</UL>

<P><STRONG><a name="[207]"></a>ui_win_hr_stop</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, ui_win_hr.o(i.ui_win_hr_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ui_win_hr_stop &rArr; DrawUI_Bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
</UL>

<P><STRONG><a name="[208]"></a>ui_win_sport</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ui_win_sport.o(i.ui_win_sport))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ui_win_sport &rArr; DrawSportIconRunning &rArr; DrawSportTimer &rArr; DrawUI_Bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Buttom
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconSwimming
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconRunning
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconMain
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSportIconBycle
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sport_proc
</UL>

<P><STRONG><a name="[1e7]"></a>ui_window_manager</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, window.o(i.ui_window_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui_window_manager
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFinder
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBattery
</UL>

<P><STRONG><a name="[16d]"></a>unit_update</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, task_step.o(i.unit_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = unit_update &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStep
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_pedometer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
</UL>

<P><STRONG><a name="[17c]"></a>unziphfmex</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, hfma2ylib.o(i.unziphfmex))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = unziphfmex &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompressbmp16
</UL>

<P><STRONG><a name="[20a]"></a>wchat_pedometer_profile_init</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, ble_wechat_service.o(i.wchat_pedometer_profile_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wchat_pedometer_profile_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wechat_services_init
</UL>

<P><STRONG><a name="[20b]"></a>wchat_target_profile_init</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, ble_wechat_service.o(i.wchat_target_profile_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wchat_target_profile_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wechat_services_init
</UL>

<P><STRONG><a name="[1ea]"></a>wechat_indicate_pedometer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_wechat_service.o(i.wechat_indicate_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wechat_indicate_pedometer
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBle
</UL>

<P><STRONG><a name="[1f7]"></a>wechat_services_init</STRONG> (Thumb, 394 bytes, Stack size 80 bytes, ble_wechat_service.o(i.wechat_services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wechat_services_init &rArr; wchat_target_profile_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wchat_target_profile_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wchat_pedometer_profile_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_indicate_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBleInit
</UL>

<P><STRONG><a name="[1b]"></a>win_alarm_proc</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, ui_win_alarm.o(i.win_alarm_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = win_alarm_proc &rArr; show_alarm &rArr; UI_Draw_Buttom &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>win_camera_proc</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, ui_win_camera.o(i.win_camera_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = win_camera_proc &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_tx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>win_findphone_proc</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, ui_win_findphone.o(i.win_findphone_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = win_findphone_proc &rArr; show_findphone_icon &rArr; UI_Draw_Buttom &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_findphone_icon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>win_hr_proc</STRONG> (Thumb, 668 bytes, Stack size 48 bytes, ui_win_hr.o(i.win_hr_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = win_hr_proc &rArr; ui_win_hr_stop &rArr; DrawUI_Bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Buttom
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_hr_stop
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_hr_ready
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_hr_none
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_hr_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>win_info_proc</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, ui_win_info.o(i.win_info_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = win_info_proc &rArr; show_information &rArr; UI_Draw_Buttom &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>win_main_proc</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, ui_win_main.o(i.win_main_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = win_main_proc &rArr; show_main_ui_style_2 &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ui_version
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_2
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_main_ui_style_1
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>win_notify_proc</STRONG> (Thumb, 750 bytes, Stack size 40 bytes, ui_win_notify.o(i.win_notify_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = win_notify_proc &rArr; bt_protocol_tx &rArr; ble_write_bytes &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_tx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageUpdatePage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_perform_notification_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>win_pedometer_proc</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, ui_win_pedometer.o(i.win_pedometer_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = win_pedometer_proc &rArr; show_pedometer &rArr; show_pedometer_val &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_pedometer
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Copy_Image
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>win_shutdown_proc</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, ui_win_shutdown.o(i.win_shutdown_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = win_shutdown_proc &rArr; ConnectionTerminate &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_clear_event
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionTerminate
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fill
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI_Bitmap_Ex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Draw_Buttom
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_tack_reset
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_bma250_to_deep_sleep
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>win_sleep_proc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, ui_win_sleep.o(i.win_sleep_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = win_sleep_proc &rArr; DrawSleepTimer &rArr; UI_Draw_Buttom &rArr; DrawUI_Bitmap_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawSleepTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>win_sport_proc</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, ui_win_sport.o(i.win_sport_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = win_sport_proc &rArr; ui_win_sport &rArr; DrawSportIconRunning &rArr; DrawSportTimer &rArr; DrawUI_Bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUTC
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_push
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_frame
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_pop
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_win_sport
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.data)
</UL>
<P><STRONG><a name="[20c]"></a>window_get</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, window.o(i.window_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = window_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_pedometer_proc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_info_proc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_findphone_proc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_alarm_proc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sleep_proc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sport_proc
</UL>

<P><STRONG><a name="[1fc]"></a>window_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, window.o(i.window_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUIInit
</UL>

<P><STRONG><a name="[20d]"></a>window_pop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, window.o(i.window_pop))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_pedometer_proc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_notify_proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_camera_proc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_info_proc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_findphone_proc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_alarm_proc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sleep_proc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sport_proc
</UL>

<P><STRONG><a name="[1fa]"></a>window_push</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, window.o(i.window_push))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskGUI
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_pedometer_proc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_main_proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_camera_proc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_info_proc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_findphone_proc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_alarm_proc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sleep_proc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_hr_proc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_sport_proc
</UL>

<P><STRONG><a name="[16f]"></a>window_set</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, window.o(i.window_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = window_set
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
</UL>

<P><STRONG><a name="[210]"></a>window_tack_reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, window.o(i.window_tack_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_shutdown_proc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f7]"></a>__SetAlarm</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, alarm.o(i.__SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __SetAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[16a]"></a>handle_notification</STRONG> (Thumb, 1494 bytes, Stack size 40 bytes, btprotocol.o(i.handle_notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = handle_notification &rArr; MessageBuildSender &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_security_request
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTICE_ADD
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageClearAll
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageBuildSender
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageBuildContent
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
</UL>

<P><STRONG><a name="[11a]"></a>battery_get_level</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, task_battery.o(i.battery_get_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = battery_get_level &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBattery
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBattery
</UL>

<P><STRONG><a name="[61]"></a>ble_evt_dispatch</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, task_ble.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_evt_dispatch &rArr; ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_on_ble_evt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_on_ble_evt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_ble_evt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_ble.o(i.taskBleInit)
</UL>
<P><STRONG><a name="[69]"></a>conn_params_error_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, task_ble.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_ble.o(i.taskBleInit)
</UL>
<P><STRONG><a name="[63]"></a>device_manager_evt_handler</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, task_ble.o(i.device_manager_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = device_manager_evt_handler &rArr; dm_application_context_delete &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_security_status_req
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_get
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_ble.o(i.taskBleInit)
</UL>
<P><STRONG><a name="[65]"></a>nus_data_handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, task_ble.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nus_data_handler &rArr; bt_protocol_rx &rArr; unit_update &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_protocol_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_ble.o(i.taskBleInit)
</UL>
<P><STRONG><a name="[64]"></a>on_adv_evt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, task_ble.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_adv_evt &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_ble.o(i.taskBleInit)
</UL>
<P><STRONG><a name="[68]"></a>on_conn_params_evt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, task_ble.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_ble.o(i.taskBleInit)
</UL>
<P><STRONG><a name="[67]"></a>reset_prepare</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, task_ble.o(i.reset_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reset_prepare &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_ble.o(i.taskBleInit)
</UL>
<P><STRONG><a name="[62]"></a>sys_evt_dispatch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, task_ble.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sys_evt_dispatch &rArr; ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_ble.o(i.taskBleInit)
</UL>
<P><STRONG><a name="[5f]"></a>flash_memofy_cb_handler</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, task_flash.o(i.flash_memofy_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_memofy_cb_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_memory_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_flash.o(i.flash_memory_Init)
</UL>
<P><STRONG><a name="[113]"></a>uuid_list_sized_encode</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[130]"></a>conn_params_negotiation</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_params_negotiation
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[56]"></a>update_timeout_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[17d]"></a>device_context_store</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.device_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = device_context_store &rArr; pstorage_block_identifier_get
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[5e]"></a>dm_pstorage_cb_handler</STRONG> (Thumb, 484 bytes, Stack size 120 bytes, device_manager_peripheral.o(i.dm_pstorage_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = dm_pstorage_cb_handler &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(i.dm_init)
</UL>
<P><STRONG><a name="[80]"></a>gattc_context_apply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_apply))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>gattc_context_load</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_load))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>gattc_context_store</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_store))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>gatts_context_apply</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.gatts_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gatts_context_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>gatts_context_load</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gatts_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gatts_context_load &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>gatts_context_store</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, device_manager_peripheral.o(i.gatts_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gatts_context_store &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>gattsc_context_apply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattsc_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gattsc_context_apply &rArr; gatts_context_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>gattsc_context_load</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gattsc_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gattsc_context_load &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>gattsc_context_store</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattsc_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gattsc_context_store &rArr; gatts_context_store &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>no_service_context_apply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_apply))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>no_service_context_load</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_load))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>no_service_context_store</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_store))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>peer_instance_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.peer_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_instance_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[5c]"></a>storage_operation_dummy_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.storage_operation_dummy_handler))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(i.device_context_store)
</UL>
<P><STRONG><a name="[1]"></a>dfu_app_reset_prepare</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dfu_app_handler.o(i.dfu_app_reset_prepare))
<BR>[Address Reference Count : 1]<UL><LI> dfu_app_handler.o(.data)
</UL>
<P><STRONG><a name="[125]"></a>cccd_configure</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_ancs_c.o(i.cccd_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cccd_configure &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_notif_source_notif_enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_data_source_notif_enable
</UL>

<P><STRONG><a name="[129]"></a>on_evt_gattc_notif</STRONG> (Thumb, 572 bytes, Stack size 120 bytes, ble_ancs_c.o(i.on_evt_gattc_notif))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_evt_gattc_notif
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_ble_evt
</UL>

<P><STRONG><a name="[12a]"></a>tx_buffer_process</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ble_ancs_c.o(i.tx_buffer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_ble_evt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_perform_notification_action
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_get_notif_attrs
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_configure
</UL>

<P><STRONG><a name="[137]"></a>descriptors_discover</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ble_db_discovery.o(i.descriptors_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = descriptors_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[134]"></a>discovery_complete_evt_trigger</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, ble_db_discovery.o(i.discovery_complete_evt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = discovery_complete_evt_trigger &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[136]"></a>discovery_error_evt_trigger</STRONG> (Thumb, 106 bytes, Stack size 104 bytes, ble_db_discovery.o(i.discovery_error_evt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = discovery_error_evt_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
</UL>

<P><STRONG><a name="[135]"></a>on_srv_disc_completion</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ble_db_discovery.o(i.on_srv_disc_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[170]"></a>clear_operation_execute</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, pstorage.o(i.clear_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = clear_operation_execute &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>

<P><STRONG><a name="[174]"></a>cmd_queue_element_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pstorage.o(i.cmd_queue_element_init))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>

<P><STRONG><a name="[172]"></a>cmd_queue_enqueue</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, pstorage.o(i.cmd_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[173]"></a>command_end_procedure_run</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pstorage.o(i.command_end_procedure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[89]"></a>data_page_erase_state_run</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, pstorage.o(i.data_page_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = data_page_erase_state_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>data_to_swap_write_state_run</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pstorage.o(i.data_to_swap_write_state_run))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>flash_operation_success_run</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, pstorage.o(i.flash_operation_success_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = flash_operation_success_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[1a3]"></a>flash_page_erase</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pstorage.o(i.flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = flash_page_erase &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_erase_data_page_entry_run
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[1a5]"></a>flash_write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pstorage.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = flash_write &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[8b]"></a>head_restore_state_run</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, pstorage.o(i.head_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = head_restore_state_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>is_page_erase_required</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pstorage.o(i.is_page_erase_required))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[171]"></a>sm_state_change</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, pstorage.o(i.sm_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>

<P><STRONG><a name="[84]"></a>state_erase_data_page_entry_run</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pstorage.o(i.state_erase_data_page_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = state_erase_data_page_entry_run &rArr; flash_page_erase &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>state_restore_head_entry_run</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, pstorage.o(i.state_restore_head_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = state_restore_head_entry_run &rArr; flash_write &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>state_restore_tail_entry_run</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, pstorage.o(i.state_restore_tail_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = state_restore_tail_entry_run &rArr; flash_write &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>state_swap_erase_entry_run</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, pstorage.o(i.state_swap_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = state_swap_erase_entry_run &rArr; flash_page_erase &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>state_write_data_swap_entry_run</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, pstorage.o(i.state_write_data_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = state_write_data_swap_entry_run &rArr; flash_write &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>store_cmd_flash_write_execute</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, pstorage.o(i.store_cmd_flash_write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = store_cmd_flash_write_execute &rArr; flash_write &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[87]"></a>swap_erase_state_run</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pstorage.o(i.swap_erase_state_run))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>swap_sub_state_err_busy_process</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pstorage.o(i.swap_sub_state_err_busy_process))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[8a]"></a>tail_restore_state_run</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pstorage.o(i.tail_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tail_restore_state_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>BMA2x2_SPI_bus_read</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, bma253.o(i.BMA2x2_SPI_bus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BMA2x2_SPI_bus_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bma253.o(i.bma250_init)
</UL>
<P><STRONG><a name="[57]"></a>BMA2x2_SPI_bus_write</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, bma253.o(i.BMA2x2_SPI_bus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BMA2x2_SPI_bus_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bma253.o(i.bma250_init)
</UL>
<P><STRONG><a name="[59]"></a>BMA2x2_delay_msek</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bma253.o(i.BMA2x2_delay_msek))
<BR>[Address Reference Count : 1]<UL><LI> bma253.o(i.bma250_init)
</UL>
<P><STRONG><a name="[55]"></a>apple_notification_error_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ancs.o(i.apple_notification_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apple_notification_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancs.o(i.ancs_service_init)
</UL>
<P><STRONG><a name="[5a]"></a>db_disc_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ancs.o(i.db_disc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = db_disc_handler &rArr; ble_ancs_c_on_db_disc_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_db_disc_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancs.o(i.db_discovery_init)
</UL>
<P><STRONG><a name="[1be]"></a>notif_attr_print</STRONG> (Thumb, 814 bytes, Stack size 40 bytes, ancs.o(i.notif_attr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = notif_attr_print &rArr; MessageBuildSender &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTICE_ADD
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageClearAll
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageBuildSender
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageBuildContent
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utf8_to_unicode_one
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_get_utf8_size
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[54]"></a>on_ancs_c_evt</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ancs.o(i.on_ancs_c_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_ancs_c_evt &rArr; notif_attr_print &rArr; MessageBuildSender &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_remove
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_request_attrs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_notif_source_notif_enable
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_handles_assign
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_data_source_notif_enable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancs.o(i.ancs_service_init)
</UL>
<P><STRONG><a name="[c6]"></a>DrawBody</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, ui_win_notify.o(i.DrawBody))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DrawBody &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2K
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2J
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2G
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LATIN_GetData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYRILLIC_GetData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRect16x16
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRect8x16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_message_notify
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_app_notify
</UL>

<P><STRONG><a name="[de]"></a>DrawTitle</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, ui_win_notify.o(i.DrawTitle))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DrawTitle &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDeepSleepMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntryDeepSleepMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2K
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2J
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2G
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LATIN_GetData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYRILLIC_GetData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRect16x16
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRect8x16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ui_version
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_message_notify
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_calling_notify
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_app_notify
</UL>

<P><STRONG><a name="[10d]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ff]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[110]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[53]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
